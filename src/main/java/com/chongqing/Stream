Stream:
流有三部分构成
1.源
2.零个或者多个中间操作
3.终止操作

流操作的分类：
1.惰性操作
2.及早求值

stream.xxx().sdfd().sfdk().sum().count()

流  支持并行化

流
Collection提供了新的Stream()方法
流不存储值：通过管道的方式获取
本质是函数式的，对流的操作会生成一个结果，不过并不会修改底层的数据源，集合可以作为流的底层数据源
延迟查找，很多流操作，过滤、映射、排序都可以延迟实现

流：
和迭代器又不同的是，Stream可以并行化操作，迭代器只能命令式、串行化操作
当时用串行话去遍历，每个item读完再读下一个item
使用并行化遍历时，数据会被分成很多段，其中每一个都在不同的线程，然后一起输出
Stream的并行操作依赖java7中引入的Fork/Join框架

集合关注的是数据与数据存储本身
流关注的则是对数据的计算
流与迭代器类似的一点是：流是无法重复使用或者消费的